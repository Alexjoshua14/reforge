/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ../../../../public/eye2/Eye.glb --types 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useLoader } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Pupil: THREE.Mesh
    Eyeball: THREE.Mesh
    Iris: THREE.Mesh
  }
  materials: {
    Pupil: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
  }
  // animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const colorMap = useLoader(THREE.TextureLoader,
    '/eye/Iris_Material.png'
  )

  const { nodes, materials } = useGLTF('/eye/Eye.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Pupil.geometry} material={materials.Pupil} />
      <mesh geometry={nodes.Eyeball.geometry} material={materials['Material.003']} />
      <mesh geometry={nodes.Iris.geometry}>
        <meshBasicMaterial map={colorMap} />
      </mesh>
    </group>
  )
}

useGLTF.preload('/Eye.glb')
